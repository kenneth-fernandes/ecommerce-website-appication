spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=order_service_user
spring.datasource.password=Welcome123

# Update the db schema for mysql
spring.jpa.hibernate.ddl-auto=update
# Configure the dialect #
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

server.port=8082
#server.port=0

# URL of Eureka (Discovery) Server
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

# Application name in order for Discovery Server to identify the client
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4J Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

# Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

# Zipkin
# already present - management.endpoints.web.exposure.include=*
management.tracing.sampling.probability=1.0
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# This is needed to ensure that the consumer Kafka application receives the expected type of values
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ecommerce.app.orderservice.event.OrderPlacedEvent


# Your project setup is incompatible with our requirements due to following reasons:
#
# - Spring Cloud Sleuth is not compatible with this Spring Cloud release train
#
#
# Action:
#
# Consider applying the following actions:
#
# - Migrate from Spring Cloud Sleuth to Micrometer Tracing .
# You can check the Sleuth 3.1 Migration Guide over here [https://github.com/micrometer-metrics/tracing/wiki/Spring-Cloud-Sleuth-3.1-Migration-Guide].
# If you want to disable this check, just set the property [spring.cloud.compatibility-verifier.enabled=false]
##################################################################################################################################

### IMPORTANT: CLEAR MAC CACHE WHEN CONNECTING TO DOCKER SQL CONTAINER
# docker run --detach --env MYSQL_ROOT_PASSWORD=Welcome123 --env MYSQL_USER=order_service_user --env MYSQL_PASSWORD=Welcome123 --env MYSQL_DATABASE=order_service --name mysql --publish 3306:3306 mysql:8-oracle
# mysql -uroot -p
# password:Welcome123


#mysql> GRANT ALL PRIVILEGES ON *.* TO 'order_service_user'@'localhost' WITH GRANT OPTION;
#Query OK, 0 rows affected, 1 warning (0.05 sec)
#
#mysql> GRANT ALL PRIVILEGES ON *.* TO 'inventory__service_user'@'localhost' WITH GRANT OPTION;
#ERROR 1410 (42000): You are not allowed to create a user with GRANT
#mysql> GRANT ALL PRIVILEGES ON *.* TO 'inventory_service_user'@'localhost' WITH GRANT OPTION;
#Query OK, 0 rows affected, 1 warning (0.02 sec)


